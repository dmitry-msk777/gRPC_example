name: Branch_Go

on:
  push:
    branches: [ test_CD_CI ]
  pull_request:
    branches: [ test_CD_CI ]

env:
  # TODO: Change variable to your image's name
  IMAGE_NAME: gprc_example

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Build
      #run: go build -v ./...
      run: |
        GOOS=linux
        echo "${{ CI_COMMIT_REF_SLUG }}"
        GOARCH=amd64
        CGO_GOARCH=amd64ENABLED=0
        go build -v -ldflags="-X 'gRPC_example/versionbuild.HashCommit=ggg'" -o $IMAGE_NAME-linux64
      
    - name: Build image
      run: docker build . --file Dockerfile --tag latest

    - name: Login to GitLab Container Registry
      uses: docker/login-action@v1
      with:
        registry: registry.gitlab.com
        username: ${{ secrets.GITLAB_USERNAME }}
        password: ${{ secrets.GITLAB_PASSWORD }}
    
    - name: Tag image to gitlab
      run: docker tag latest registry.gitlab.com/dmitry-msk777/go_my_test_development:latest
      
    - name: Push image to gitlab
      run: docker push registry.gitlab.com/dmitry-msk777/go_my_test_development:latest

   # - name: Test
   #   run: go test -v ./...
     
     
# Push image to GitHub Packages...
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: build

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
